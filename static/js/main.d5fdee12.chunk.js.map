{"version":3,"sources":["App/browserHistory.ts","pages/SamplePage/index.tsx","api/bitfi/base.ts","api/bitfi/helpers.ts","pages/BitfiPage/index.tsx","api/bitfi/wallets.ts","App/Routers.tsx","App/index.tsx","index.tsx"],"names":["createBrowserHistory","SamplePage","axios","defaults","baseURL","process","interceptors","request","use","config","error","Promise","reject","response","buildAuthHeader","apiPath","nonce","Date","now","toString","signature","JSON","stringify","CryptoJS","HmacSHA384","BitfiPage","useEffect","base","post","headers","getWallets","Routers","basePath","history","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8ZAEeA,gBCUAC,EARqB,WAClC,OACE,oD,iBCDJC,IAAMC,SAASC,QAHkBC,2BAM/BH,IAAMI,aAAaC,QAAQC,KAAI,SAAUC,GACvC,OAAOA,KACN,SAAUC,GAEX,OAAOC,QAAQC,OAAOF,MAIxBR,IAAMI,aAAaO,SAASL,KAAI,SAAUK,GAGxC,OAAOA,KACN,SAAUH,GAGX,OAAOC,QAAQC,OAAOF,MAMXR,QAAf,E,kBC3BaY,EAAkB,SAACC,GAC9B,IAGMC,GAAsB,IAAbC,KAAKC,OAAcC,WAI9BC,EAAS,eAAWL,GAAX,OAAqBC,GAArB,OAA6BK,KAAKC,UAHlC,KASb,MAAO,CACL,YAAaN,EACb,aAfqBX,8CAgBrB,gBANUkB,IAASC,WAAWJ,EATNf,+CAS4Bc,aCIzCM,EAZoB,WAKjC,OAJAC,qBAAU,YCHc,WACxB,IAAMX,EAAU,oBAGTY,EAAKC,KAAKb,EAFJ,GAEmB,CAAEc,QAASf,EAAgBC,KDAzDe,KACC,IAGD,kDEWWC,EAbW,WACxB,IAAMC,EAHwB3B,WAK9B,OACE,cAAC,IAAD,CAAQ4B,QAASA,EAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAI,UAAKF,EAAL,KAAkBG,OAAK,EAACC,UAAWnC,IAC9C,cAAC,IAAD,CAAOiC,KAAI,UAAKF,EAAL,UAAuBG,OAAK,EAACC,UAAWX,UCD5CY,EARc,WAC3B,OACE,mCACE,cAAC,EAAD,OCLNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d5fdee12.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import React from 'react';\n\ntype Props = {};\n\nconst SamplePage: React.FC<Props> = () => {\n  return (\n    <>\n      Sample Page\n    </>\n  );\n}\n\nexport default SamplePage;\n","import axios from 'axios';\n\nconst { REACT_APP_BITFI_PATH } = process.env;\nconst csrfIgnoreMethods = ['get', 'head', 'options'];\n\naxios.defaults.baseURL = REACT_APP_BITFI_PATH\n\nconst initialize = function (): void {\n  axios.interceptors.request.use(function (config) {\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n  // Add a response interceptor\n  axios.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // const { response } = error;\n\n    return Promise.reject(error);\n  });\n};\n\ninitialize();\n\nexport default axios;\n","import CryptoJS from 'crypto-js';\n\nexport const buildAuthHeader = (apiPath: string) => {\n  const apiKey: string = process.env.REACT_APP_BITFI_KEY as string;\n  const apiSecret: string = process.env.REACT_APP_BITFI_SECRET as string;\n\n  const nonce = (Date.now() * 1000).toString() // Standard nonce generator. Timestamp * 1000\n  const body = {\n  } // Field you may change depending on endpoint\n\n  let signature = `/api/${apiPath}${nonce}${JSON.stringify(body)}`\n  // Consists of the complete url, nonce, and request body\n\n  const sig = CryptoJS.HmacSHA384(signature, apiSecret).toString()\n  // The authentication signature is hashed using the private key\n\n  return {\n    'bfx-nonce': nonce,\n    'bfx-apikey': apiKey,\n    'bfx-signature': sig\n  };\n}\n","import React, { useEffect } from 'react';\nimport { getWallets } from 'api/bitfi/wallets';\n\ntype Props = {};\n\nconst BitfiPage: React.FC<Props> = () => {\n  useEffect(() => {\n    getWallets();\n  }, [])\n\n  return (\n    <>\n      BitfiPage\n    </>\n  );\n}\n\nexport default BitfiPage;\n","import base from './base';\nimport { buildAuthHeader } from './helpers';\n\nexport const getWallets = () => {\n  const apiPath = 'v2/auth/r/wallets';\n  const body = {};\n\n  return base.post(apiPath, body, { headers: buildAuthHeader(apiPath) });\n}\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\n\nimport history from './browserHistory';\nimport SamplePage from 'pages/SamplePage';\nimport BitfiPage from 'pages/BitfiPage';\n\nconst { REACT_APP_BASE_PATH } = process.env;\n\nconst Routers: React.FC = () => {\n  const basePath = REACT_APP_BASE_PATH;\n\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path={`${basePath}/`} exact component={SamplePage} />\n        <Route path={`${basePath}/bitfi`} exact component={BitfiPage} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default Routers;\n","import React from 'react';\n\nimport './styles.scss';\nimport Routers from './Routers';\n\ntype Props = {}\n\nconst App: React.FC<Props> = () => {\n  return (\n    <>\n      <Routers />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}